Creating a basic tab component
Our job now is to separate the description from the reviews using a tab component that we are going to build. We are going to create a simple tab component first and refactor this into the compound component pattern in the next section. 

It's time to start on our tab component:

First, let's create a file called Tabs.tsx for our tab component with the following content in it as a skeleton class component:
import * as React from "react";

interface IProps {}
interface IState {}
class Tabs extends React.Component<IProps, IState> {
  public constructor(props: IProps) {
    super(props);
    this.state = {};
  }
  public render() {
    return;
  }
}

export default Tabs;
We have chosen to create a class-based component because our component will have to track state for whichever tab heading is active. 

So, let's complete the interface for our state by adding a property that will give the active heading name:
interface IState {
  activeHeading: string;
}
Our component will take in the tab headings and display them as properties. So, let's complete our interface for this:
interface IProps {
  headings: string[];
}
So, our component can take in an array of heading names in a headings prop.

Let's create the initial value for the activeHeading state in the constructor now:
public constructor(props: IProps) {
  super(props);
  this.state = {
    activeHeading:
      this.props.headings && this.props.headings.length > 0
        ? this.props.headings[0]
        : ""
  };
}
So, the active heading will initially be set to the first element in the headings array. The ternary ensures our component doesn't produce an error if no tabs have been passed to it by the consumer.

Moving on to the render method now, let's render our tabs in a list by mapping over the headings prop:
    public render() {
      return (
        <ul className="tabs">
          {this.props.headings.map(heading => (
            <li className={heading === this.state.activeHeading ? 
            "active" : ""}
            >
              {heading}
            </li>
          ))}
        </ul>
      );
    }
We have referenced some CSS classes including active, which is set using a ternary based on whether it is the active tab heading being rendered or not.

Let's add these CSS classes to index.css now:
.tabs {
  list-style: none;
  padding: 0;
}
.tabs li {
  display: inline-block;
  padding: 5px;
  margin: 0px 5px 0px 5px;
  cursor: pointer;
}
.tabs li:focus {
  outline: none;
}
.tabs li.active {
  border-bottom: #222 solid 2px;
}
Before we can see what our tab component looks like, we need to consume it.

So, let's add this on the Product component by first importing the Tabs component:
import Tabs from "./Tabs";
We can now add the Tabs component in between the product name and description:
<h1>{product.name}</h1>
<Tabs headings={["Description", "Reviews"]} />
<p>{product.description}</p>
We pass the Tabs component the two tab headings we want to display, which are Description and Reviews.

Let's see what this looks like:



That's a good start. The first tab is underlined from the active CSS style just as we wanted. If we click on the Reviews tab nothing happens, though.

So, let's reference the click handler back in Tabs.tsx for each tab:
<li
  onClick={this.handleTabClick}
  className={heading === this.state.activeHeading ? "active" : ""}
>
  {heading}
</li>
Let's implement the click handler as well now:
private handleTabClick = (e: React.MouseEvent<HTMLLIElement>) => {
  const li = e.target as HTMLLIElement;
  const heading: string = li.textContent ? li.textContent : "";
  this.setState({ activeHeading: heading });
};
We first extract the heading from the textContent of li. We then set the activeHeading state to this. This will cause React to re-render the component with the clicked tab shown as being active.

Notice that we help the TypeScript compiler declare the li variable as HTMLLIElement using the as keyword. Without doing this, the compiler wouldn't be happy with us accessing the textContent property within it.

If we go to the running app again, we can now click on our tabs and see the active state changing.

At the moment, our tabs component just renders some tabs that can be clicked on. It doesn't tie into any content yet. We'll actually not tie in our headings to content until the next section on the render prop