Lazy loading routes
At the moment, all the JavaScript for our app is loaded when the app first loads. This includes the Admin page that users don't use that often. It would be great if the AdminPage component wasn't loaded when the app loads and instead loaded on demand. This is exactly what we are going to do in this section. This is called "lazy loading" components. The following steps allows us to load things on demand:

First, we are going to import the Suspense component from React, which we are going to use a little later:
import { Suspense } from "react";
Now, we are going to import the AdminPage component differently:
const AdminPage = React.lazy(() => import("./AdminPage"));
We use a React function called lazy which takes in a function that returns a dynamic import, which in turn is assigned to our AdminPage component variable.

After we have done this, we may get a linting error: A dynamic import call in ES5/ES3 requires the 'Promise' constructor. Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your `--lib` option. So, in tsconfig.json, let's add the lib compiler option:
"compilerOptions": { 
  "lib": ["es6", "dom"],
  ...
}
The next part is to wrap the Suspense component around the AdminPage component:
<Route path="/admin">
  {loggedIn ? (
    <Suspense fallback={<div className="page-container">Loading...</div>}>
      <AdminPage />
    </Suspense>
  ) : (
    <Redirect to="/login" />
  )}
</Route>
The Suspense component shows a div tag containing Loading... whilst AdminPage is being loaded.

Let's try this in the running app. Let's open the browser developer tools and go to the Network tab. In our app, let's go to the Products page and refresh the browser. Let's then clear the content in the Network tab in the developer tools. If we then go to the Admin page in our app and look at the content in the Network tab, we'll see the chunk of JavaScript for the AdminPage component dynamically loaded:


The AdminPage component loads really fast, so we never really see the Loading ... div tag. So, let's slow the connection down in the browser developer tools:


If we then refresh the browser, and go to the Admin page again, we'll see Loading ...:
